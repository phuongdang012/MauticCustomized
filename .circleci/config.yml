# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.2.32-apache-node-browsers-legacy
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout
      # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev

      - run: sudo apt-get update
      - run: sudo apt-get install -y libc-client-dev libkrb5-dev libicu-dev libmcrypt-dev libssl-dev libz-dev libpng-dev libjpeg62-turbo-dev libmagickwand-dev imagemagick libzip-dev libxpm-dev libjpeg-dev libfreetype6-dev cron nano mariadb-client ca-certificates software-properties-common zip
      #- run: sudo apt-get install build-essential checkinstall
      - run: sudo apt purge -y --auto-remove -o
      - run: sudo rm -r /var/lib/apt/lists/*
      - run: sudo docker-php-ext-configure imap --with-kerberos --with-imap-ssl
      - run: sudo docker-php-ext-install imap && docker-php-ext-enable imap

      - run: docker-php-ext-configure gd --with-freetype-dir=/usr/lib --with-png-dir=/usr/lib --with-jpeg-dir=/usr/lib
      - run: docker-php-ext-install gd
      - run: docker-php-ext-configure opcache --enable-opcache
      - run: docker-php-ext-install intl mbstring mysqli pdo_mysql zip opcache bcmath gd sockets

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      - run: yarn install
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

      # prepare the database
      - run: touch storage/testing.sqlite
      - run: php artisan migrate --env=testing --database=sqlite_testing --force

      # run tests with phpunit or codecept
      #- run: ./vendor/bin/phpunit
      - run: ./vendor/bin/codecept build
      - run: ./vendor/bin/codecept run
